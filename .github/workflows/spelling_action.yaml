name: Spellcheck Action

on:
  push:

jobs:
  get-type-of-content:
    name: Get type of content
    runs-on: ubuntu-latest
    
    outputs:
      read-files: ${{ steps.get-files.outputs.READ_FILES }}
      other-files: ${{ steps.get-files.outputs.OTHER_FILES }}
      perform-check: ${{ steps.get-files.outputs.PERFORM_CHECK }}

    env:
      temporary-file-name: temp-file.md
      reads-folder: content/reads/
      scripts-folder: .github/scripts/

    steps:
      - name: Clone or Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: List Pushed Markdown Files
        id: list-pushed-files
        run: |
          echo "Before commit: ${{ github.event.before }}"
          echo "Current commit: ${{ github.sha }}"
          added_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          echo "$added_files"
          added_markdown_files=$(echo "$added_files" | grep '.md') || true
          echo "$added_markdown_files"
          
          # multiline output
          echo "TO_BE_CHECKED_FILES<<EOF" >> $GITHUB_OUTPUT
          echo "$added_markdown_files" >> $GITHUB_OUTPUT 
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Get Files
        id: get-files
        run: |
          # Get the list of added files
          to_be_checked_files="${{ steps.list-pushed-files.outputs.TO_BE_CHECKED_FILES }}"
          echo "To be checked files: $to_be_checked_files"

          if [ -z "$to_be_checked_files" ]; then
            echo "No files to be checked. Stop workflow!!"
            echo "PERFORM_CHECK=false" >> "$GITHUB_OUTPUT"
          else
            # Filter files that are in the specific directory
            # '|| true' is used to prevent the workflow from failing if grep returns a non-zero exit code
            read_files=$(echo "$to_be_checked_files" | grep '${{ env.reads-folder }}') || true
            other_files=$(echo "$to_be_checked_files" | grep -v '${{ env.reads-folder }}') || true
            echo "Read files: $read_files"
            echo "Other files: $other_files"
            
            echo "READ_FILES<<EOF" >> $GITHUB_OUTPUT
            echo "$read_files" >> $GITHUB_OUTPUT 
            echo "EOF" >> $GITHUB_OUTPUT

            echo "OTHER_FILES<<EOF" >> $GITHUB_OUTPUT
            echo "$other_files" >> $GITHUB_OUTPUT 
            echo "EOF" >> $GITHUB_OUTPUT

            echo "PERFORM_CHECK=true" >> "$GITHUB_OUTPUT"
            
          fi

  read-content:
    name: Check read content
    runs-on: ubuntu-latest
    needs: get-type-of-content
    if: needs.get-type-of-content.status == 'success' && needs.get-type-of-content.outputs.perform-check == 'true'

    env:
      temporary-file-name: temp-file.md
      reads-folder: content/reads/
      scripts-folder: .github/scripts/

    steps:
      - name: Clone or Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate if exists read content
        id: get-read-file
        run: |
          read_files="${{ needs.get-type-of-content.outputs.read-files }}"
          # Check the size of the read_files array
          if [ -z "$read_files" ]; then
            echo "No files found in the '${{ env.reads-folder }}' directory."
            echo "IS_TO_PERFORM_CHECK=false" >> "$GITHUB_OUTPUT"
          else
            echo "Found files in the '${{ env.reads-folder }}' directory."
            
            # Get the first element if there is more than one
            if [ $(echo "$read_files" | wc -l) -gt 1 ]; then
              first_file=$(echo "$read_files" | head -n 1)
              echo "Found more than one file. Only the first file will be considered: $first_file"
              {
                echo "PUSHED_READ_FILE=$first_file"
                echo "IS_TO_PERFORM_CHECK=true"
              } >> "$GITHUB_OUTPUT"
            else
              echo "Only one file found: $read_files"
              {
                echo "PUSHED_READ_FILE=$read_files"
                echo "IS_TO_PERFORM_CHECK=true"
              } >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Create temporary file with content to be checked
        if: ${{ steps.get-read-file.outputs.IS_TO_PERFORM_CHECK == 'true' }}
        id: create-temp-file
        run: |
          echo "Read file: ${{ steps.get-read-file.outputs.PUSHED_READ_FILE }}"
          echo "Temporary file: ${{ env.temporary-file-name }}"
          ${{ env.scripts-folder }}copy_sections_to_file.sh ${{ steps.get-read-file.outputs.PUSHED_READ_FILE }} ${{ env.temporary-file-name }}
        shell: bash

      - name: Spellcheck the temporary file
        if: steps.create-temp-file.outcome == 'success'
        uses: rojopolis/spellcheck-github-actions@v0
        with:
          source_files: ${{ env.temporary-file-name }}
          task_name: Markdown

      - name: Delete temporary file
        if: always() && steps.create-temp-file.outcome == 'success'
        run: |
          ${{ env.scripts-folder }}delete_file.sh ${{ env.temporary-file-name }}
        shell: bash

  other-content:
    name: Check other content
    runs-on: ubuntu-latest
    needs: get-type-of-content
    if: needs.get-type-of-content.status == 'success' && needs.get-type-of-content.outputs.perform-check == 'true'

    env:
      reads-folder: content/reads/

    steps:
      - name: Clone or Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate if exists other content
        id: validate-existence
        run: |
          files="${{ needs.get-type-of-content.outputs.other-files }}"

          if [ -z "$files" ]; then
            echo "No files found ouside of the '${{ env.reads-folder }}' directory."
            echo "IS_TO_PERFORM_CHECK=false" >> "$GITHUB_OUTPUT"
          else
            echo "Found files ouside of the '${{ env.reads-folder }}' directory."
            echo "IS_TO_PERFORM_CHECK=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Spellcheck the other content
        if: ${{ steps.validate-existence.outputs.IS_TO_PERFORM_CHECK == 'true' }}
        uses: rojopolis/spellcheck-github-actions@v0
        with:
          source_files: ${{ needs.get-type-of-content.outputs.other-files }}
          task_name: Markdown